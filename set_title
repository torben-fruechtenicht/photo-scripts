#! /usr/bin/env bash

set -eu
shopt -s nocasematch

declare -r BASEDIR="$(dirname "$(readlink -e "$0")")"

source "$BASEDIR/lib/photofiles.sh"

PATH="$BASEDIR:$BASEDIR/lib:$PATH"

while getopts "f" opt; do
    case $opt in
        f ) 
			declare -r FORCE_OVERWRITE=;;
	esac
done
shift $(expr $OPTIND - 1 )


declare -r TITLE=$(echo "${1:-}" | tr ' ' '-')
if [[ -z $TITLE ]]; then
    echo "[ERROR] Title parameter missing" >&2
    exit 1
elif [[ -f $TITLE || -d $TITLE ]]; then
	echo "[ERROR] Title parameter is a file or directory" >&2
	exit 1
fi

shift 1

if [[ $# = 0 ]]; then
    declare -r READ_PHOTOS_FROM_STDIN=
else 
    declare -r PHOTOS=$@
fi


apply_set_title() {

    local -r file=$1
    local -r filename=${file##*/}

    local -r photoid=$(basename "$file")
    local -r old_title=${photoid%%_*}
    if ! [[ -v FORCE_OVERWRITE ]] && [[ $old_title = $TITLE ]]; then
        echo "[WARN] Cannot change title of $file to \"$TITLE\", same as old title" >&2
        return
    fi    

    if ! [[ -w $file ]]; then
        chmod u+w "$file"
        local -r restore_write_protection=
    fi

    local -r new_filename="${TITLE}_${filename#*_}"
    local -r newfile="$(dirname "$file")/$new_filename"

    # this is a real error case unlike the other check above (which stems from careless user input)
    if [[ -e $newfile ]] && ! [[ -v FORCE_OVERWRITE ]]; then
        echo "[ERROR] Cannot change title of $file to \"$TITLE\", file $newfile exists already" >&2
        exit 1
    fi

    set_title_in_iptc "$file" "$(photoid "$newfile")"

    # do an additional check if $newfile exists because we might have skipped the check above because we're in 
    # FORCE_OVERWRITE mode
    ! test -e "$newfile" && mv "$file" "$newfile"

    if [[ -v restore_write_protection ]]; then
        chmod u-w "$newfile"
    fi

    echo "$newfile"
}

set -o pipefail
if [[ -v READ_PHOTOS_FROM_STDIN ]]; then
    collect_associated_files < /dev/stdin | while read -r file; do apply_set_title "$file"; done
else 
    collect_associated_files "$PHOTOS" | while read -r file; do apply_set_title "$file"; done
fi 