#! /usr/bin/env bash

set -eu

. "$(dirname "$(readlink -e "$0")")/../lib/sidecar.sh"
. "$(dirname "$(readlink -e "$0")")/../lib/metadata.sh"

while getopts "c:k:ov" opt; do
    case $opt in
        c ) 
			declare -r CREATOR=$OPTARG;;   
		k ) 
			# CSV string, using ";"
			declare -r KEYWORDS=$OPTARG;;
		o ) 
			declare -r OVERWRITE_EXISTING=;;
		v )
			declare -r VERBOSE=;;
	esac
done
shift $(expr $OPTIND - 1 )

declare -r TEMPLATES_DIR=$(readlink -e "$1")
if [[ -z $TEMPLATES_DIR ]]; then	
	echo "[ERROR] Templates directory does not exist" >&2
	exit 1
elif ! [[ -d $TEMPLATES_DIR ]]; then
	echo "[ERROR] Templates directory (first parameter) is not a directory" >&2
	exit 1
fi
shift 1

declare -r PHOTO_FILES=$@


lookup_camera_from_exif() {
	local -r file=$1
	local -r file_type=$(echo ${file##*.} | tr '[:upper:]' '[:lower:]')

	case $file_type in 
		raw )
			exiv2 pr -Pt -g "Exif.PanasonicRaw.Model" "$file" 2> /dev/null;;
		*) 
			camera=$(exiv2 pr -Pt -g 'Exif.Image.Model' "$file" 2> /dev/null)
			echo "${camera//[[:space:]]/}";;
	esac
}

lookup_lens_from_exif() {
	local -r file=$1
	local -r file_type=$(echo "${file##*.}" | tr '[:upper:]' '[:lower:]')

	case $file_type in 
		raw|crw|cr2 )
			;; # do nothing, the only cameras we have with these types are compact cameras
		orf)
			exiv2 pr -Pt -g "Exif.OlympusEq.LensModel" "$file" 2> /dev/null;;
		jpg )
			exiv2 pr -Pt -g  "Exif.Photo.LensModel" "$file" 2> /dev/null;;
		*) 
			echo "[WARN] Unknown filetype $file_type of $file, cannot lookup lens info" >&2;;
	esac
}

lookup_manufacturer_from_exif() {
	local -r file=$1
	local -r file_type=$(echo "${file##*.}" | tr '[:upper:]' '[:lower:]')

	case $file_type in 
		raw )
			exiv2 pr -Pt -g "Exif.PanasonicRaw.Make" "$file" 2> /dev/null | xargs;;
		*) 
			exiv2 pr -Pt -g "Exif.Image.Make" "$file" 2> /dev/null | xargs;;
	esac
}

select_template() {
	declare -r filetype=$1
	declare -r camera=$2
	declare -r lens=$3

	if [[ -e "$TEMPLATES_DIR/$camera/$lens/template.$filetype.pp3" ]]; then
		echo "$TEMPLATES_DIR/$camera/$lens/template.$filetype.pp3"
	elif [[ -e "$TEMPLATES_DIR/$camera/template.$filetype.pp3" ]]; then
		echo "$TEMPLATES_DIR/$camera/template.$filetype.pp3"
	elif [[ -e "$TEMPLATES_DIR/template.pp3" ]]; then
		echo "$TEMPLATES_DIR/template.pp3"
	fi
}


for file in $PHOTO_FILES; do

	file=$(readlink -e "$file")
	! test -z "$file" || continue

	is_original_photofile $file || continue
	
	sidecar_file="$file.pp3"

	if [[ -e $sidecar_file ]] && ! [[ -v OVERWRITE_EXISTING ]]; then
		test -v VERBOSE && echo "[SKIP] Sidecar $sidecar_file exists" >&2
		continue
	fi

	test -v VERBOSE && echo "[PHOTO] $file" >&2

	camera_from_exif=$(lookup_camera_from_exif $file)
	if [[ -z $camera_from_exif ]]; then
		echo "[ERROR] No camera info found in EXIF data of $file" >&2
		continue
	fi

	lens_from_exif=$(lookup_lens_from_exif "$file")
	manufacturer_from_exif=$(lookup_manufacturer_from_exif "$file")

	test -v VERBOSE && echo "[CAMERA] $camera_from_exif" >&2
	test -v VERBOSE && echo "[MANUFACTURER] $manufacturer_from_exif" >&2
	test -v VERBOSE && test -n "$lens_from_exif" && echo "[LENS] $lens_from_exif" >&2

	file_type=$(echo ${file##*.} | tr '[:upper:]' '[:lower:]')
 	sidecar_template=$(select_template "$file_type" "$camera_from_exif" "$lens_from_exif")
	if [[ -z $sidecar_template ]]; then
		echo "[ERROR] No sidecar template found for $file"
		continue
	fi
	test -v VERBOSE && echo "[INFO] Using template $sidecar_template" >&2

 	cp -f "$sidecar_template" "$sidecar_file"

	if [[ -v CREATOR ]]; then

		sidecar_set_property "$sidecar_file" "IPTC" "Creator" "$CREATOR" 

		year_from_exif=$(exiv2 -Pt -g 'Exif.Photo.DateTimeOriginal' "$file" 2> /dev/null | cut -d':' -f 1)
		sidecar_set_property "$sidecar_file" "IPTC" "Copyright" "Copyright (c) $CREATOR 2005-$year_from_exif"

	fi

	fullname=$(fullname_from_photofile "$file")
	sidecar_set_property "$sidecar_file" "IPTC" "Headline" "$(headline_from_photofile "$file" )"
	sidecar_set_property "$sidecar_file" "IPTC" "Caption" "[$fullname]"
	
	if [[ -n "$lens_from_exif" ]]; then
		iptc_lens="$lens_from_exif;"
	else 
		iptc_lens=""
	fi
	iptc_keywords="RawTherapee;$camera_from_exif;$manufacturer_from_exif;$iptc_lens${KEYWORDS-}"
	sidecar_set_iptc_keywords "$sidecar_file" "$iptc_keywords"

	echo "$sidecar_file"
done
