#! /usr/bin/env bash

set -eu


declare -r NO_DCIM_DIR_RC=101
declare -r NO_TARGET_DIR_RC=102
declare -r NO_ALBUM_RC=103


source "$(dirname "$(readlink -e "$0")")/lib/jpeg_exif.sh"

declare -r TMP_DIR=$(mktemp -d)


cleanup() {
  test -e "$TMP_DIR" && rm -rf "$TMP_DIR"
}
trap cleanup EXIT

declare -r FILETYPES_RAW_ONLY="raw"
declare -r FILETYPES_JPG_ONLY="jpeg"
declare -r FILETYPES_RAW_AND_JPG="raw+jpeg"

while getopts "t:a:y:" opt; do
    case $opt in
        a )
            declare -r ALBUM=$(tr ' ' '-' <<<"$OPTARG");;
        t )
            declare -r TITLE=$(tr ' ' '-' <<<"$OPTARG");;
        y )
            if ! [[ $OPTARG =~ ^${FILETYPES_RAW_ONLY}|${FILETYPES_JPG_ONLY}|${FILETYPES_RAW_AND_JPG}$ ]]; then 
                echo "[ERROR] Invalid filetypes option $OPTARG"
                exit 1
            else 
                declare -r FILETYPES=$OPTARG
            fi;;
	esac
done
shift $(expr $OPTIND - 1 )

if ! [[ -v ALBUM ]]; then
    echo "[ERROR] No album name given" >&2
    exit $NO_ALBUM_RC
fi

if ! [[ -v FILETYPES ]]; then
    declare -r FILETYPES=$FILETYPES_RAW_AND_JPG
fi

declare -r DCIM_DIR=$(readlink -e "$1")
if [[ -z $DCIM_DIR ]]; then
    echo "[ERROR] None given or nonexistent DCIM directory" >&2
    exit $NO_DCIM_DIR_RC
fi

declare -r TARGET_DIR=$(readlink -e "$2")
if [[ -z $TARGET_DIR ]]; then
    echo "[ERROR] None given or nonexistent target directory" >&2
    exit $NO_TARGET_DIR_RC
fi


build_photonumber_filename_with_leading_p() {
    local -r file_basename=$(basename "$1")
    # remove the leading "P"
    local -r p_removed=${file_basename:1}
    echo ${p_removed%%.*}
}

build_photonumber_canon_exif_filenumber() {
    # e.g. "100-2071"
     exiv2 -Pt -g 'Exif.Canon.FileNumber' "$1" 2> /dev/null | tr --delete '-' 
}

build_photonumber_olympus_filename() {
    local -r photofile=$1
    # format of photo number: <MONTH><DAY><NUMBER>, zero-digit values of month or day
    # are *not zero-padded* but with leading underscore
    basename "${photofile%.*}" | tr '_' '0'
}

camera_id() {
    local -r photofile=$1
    local -r manufacturer=$(lookup_manufacturer_from_exif "$photofile")
    local -r camera=$(lookup_camera_from_exif "$photofile")

    echo "$manufacturer $camera" | tr ' ' '_'
}

build_photonumber() {
    local -r photofile=$1
    case "$(camera_id "$photofile")" in 
        Panasonic_DMC-FZ50 )
            build_photonumber_filename_with_leading_p "$photofile";;
        Canon_CanonPowerShotG9|Canon_CanonPowerShotS70 )
            build_photonumber_canon_exif_filenumber "$photofile";;
        OLYMPUS_IMAGING_CORP._E-M10 )
            build_photonumber_olympus_filename "$photofile";;
    esac
}

camera_name() { 
    local -r photofile=$1
    case "$(camera_id "$photofile")" in 
        Panasonic_DMC )
            echo "fz50";;
        Canon_CanonPowerShotG9 )
            echo "g9";;
        Canon_CanonPowerShotS70 )
            echo "s70";;
        OLYMPUS_IMAGING_CORP._E-M10 )
            echo "e-m10";;
    esac
}

build_targetpath() {
    local -r photofile=$1

    local -r datetimeoriginal=$(exiv2 -Pt -g 'Exif.Photo.DateTimeOriginal' "$photofile" 2> /dev/null)
	
    local -r year=$(cut -d':' -f 1 <<<"$datetimeoriginal")
	local -r date=$(cut -d' ' -f 1 <<<"$datetimeoriginal" | tr ':' '-')
    local -r date_numerical=$(cut -d' ' -f 1 <<<"$datetimeoriginal" | tr --delete ':')
	local -r timeofday=$(cut -d' ' -f2 <<<"$datetimeoriginal" | cut -d ':' -f1-2 | tr --delete ':')

    local -r target_dir="$TARGET_DIR/$year/$ALBUM/$date"

    local -r camera=$(camera_name "$photofile")
    local -r photonumber=$(build_photonumber "$photofile")
    local -r extension=${photofile##*.}
    local -r filename="${TITLE}_${date_numerical}_${timeofday}_${camera}_${photonumber}.${extension}"

    echo "$target_dir/$filename"
}


if ! [[ -v TITLE ]]; then
    declare -r TITLE=$ALBUM
fi

case $FILETYPES in 
    $FILETYPES_RAW_ONLY )
        declare -r EXTENSIONS=".+\.(ORF|CRW|CR2|RAW)";;
    $FILETYPES_JPG_ONLY )
        declare -r EXTENSIONS=".+\.(JPG)";;
    $FILETYPES_RAW_AND_JPG|* )
        declare -r EXTENSIONS=".+\.(ORF|CRW|CR2|RAW|JPG)";;
esac

# TODO to use DATE_TAKEN, add another step to pipeline: get date from photofile and compare with DATE, print photofile to stdout
# if dates match.
# Using find checks will not work, they only check if newer as a given date
# DOC when using find with both -exec (for copying) and -printf (for the filename), copying must happen first. Otherwise
# the name will already have been printed to stdout before the file was copied
find "$DCIM_DIR" -regextype posix-extended -type f -iregex $EXTENSIONS \
    -exec cp --preserve=timestamps {} "$TMP_DIR" \; -printf "$TMP_DIR"'/%f\n' | while read -r photofile; do

    target_filename=$(build_targetpath "$photofile")

    if [[ -e $target_filename ]]; then
        echo "[WARN] $target_filename exists, skipping" >&2
        continue
    fi
    
    if [[ -z $(readlink -f "$target_filename") ]]; then
        mkdir --parents "$(dirname "$target_filename")"
    fi

    cp --preserve=timestamps "$photofile" "$target_filename"
    chmod -w "$target_filename"

    echo "$target_filename"

done