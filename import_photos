#! /usr/bin/env bash

set -eu


declare -r NO_DCIM_DIR_RC=101
declare -r NO_TARGET_DIR_RC=102
declare -r NO_ALBUM_RC=103


BASE_DIR=$(dirname "$(readlink -e "$0")")
source "$BASE_DIR/lib/exif.sh"
source "$BASE_DIR/lib/directories.sh"
source "$BASE_DIR/lib/photoid.sh"

declare -r TMP_DIR=$(mktemp -d)

cleanup() {
  test -e "$TMP_DIR" && rm -rf "$TMP_DIR"
}
trap cleanup EXIT

declare -r FILETYPES_RAW_ONLY="raw"
declare -r FILETYPES_JPG_ONLY="jpeg"
declare -r FILETYPES_RAW_AND_JPG="raw+jpeg"

while getopts "t:a:y:c:" opt; do
    case $opt in
        a )
            declare -r ALBUM=$(tr ' ' '-' <<<"$OPTARG");;
        t )
            declare -r TITLE=$(tr ' ' '-' <<<"$OPTARG");;
        y )
            # FIXME check is not needed here: we can check this below when determining the extensions clause, add a 
            # default clause there
            if ! [[ $OPTARG =~ ^${FILETYPES_RAW_ONLY}|${FILETYPES_JPG_ONLY}|${FILETYPES_RAW_AND_JPG}$ ]]; then 
                echo "[ERROR] Invalid filetypes option $OPTARG"
                exit 1
            else 
                declare -r FILETYPES=$OPTARG
            fi;;
        c ) 
            declare -r CAMERA=$OPTARG;;
	esac
done
shift $(expr $OPTIND - 1 )

if ! [[ -v ALBUM ]]; then
    echo "[ERROR] No album name given" >&2
    exit $NO_ALBUM_RC
fi

if ! [[ -v FILETYPES ]]; then
    declare -r FILETYPES=$FILETYPES_RAW_AND_JPG
fi

if [[ $# == 2 ]]; then
    declare -r DCIM_DIR=$(readlink -e "$1")
    declare -r TARGET_DIR=$(readlink -e "$2")
else 
    declare -r DCIM_DIR=$(readlink -e "$1")
    declare -r SELECTION_PATTERN=$2
    declare -r TARGET_DIR=$(readlink -e "$3")
fi

if [[ -z $DCIM_DIR ]]; then
    echo "[ERROR] None given or nonexistent DCIM directory" >&2
    exit $NO_DCIM_DIR_RC
fi

if [[ -z $TARGET_DIR ]]; then
    echo "[ERROR] None given or nonexistent target directory" >&2
    exit $NO_TARGET_DIR_RC
fi

build_targetpath() {
    local -r photofile=$1

    local -r datetimeoriginal=$(lookup_exif_datetimeorig_or_lastmod "$photofile")

    local date_iso=${datetimeoriginal% *}
    local target_dir="$TARGET_DIR/$(directories_create_photofile_path_from_isodate_album "$date_iso" "$ALBUM")"

    if [[ -v CAMERA ]]; then
        local -r camera=$CAMERA
    else 
        local -r camera=$(photoid_camera_from_exif "$(lookup_camera_from_exif "$photofile")")
    fi
    
    local -r photonumber=$(create_photonumber "$photofile")
    local -r photoid=$(photoid_create "$TITLE" "$datetimeoriginal" "$camera" "$photonumber")
    local -r extension=${photofile##*.}
    echo "$target_dir/$photoid.$extension"
}


if ! [[ -v TITLE ]]; then
    declare -r TITLE=$ALBUM
fi

case $FILETYPES in 
    $FILETYPES_RAW_ONLY )
        declare -r EXTENSIONS=".+\.(ORF|CRW|CR2|RAW|ARW)";;
    $FILETYPES_JPG_ONLY )
        declare -r EXTENSIONS=".+\.(JPG)";;
    $FILETYPES_RAW_AND_JPG|* )
        declare -r EXTENSIONS=".+\.(ORF|CRW|CR2|RAW|JPG|ARW)";;
esac

# TODO to use DATE_TAKEN, add another step to pipeline: get date from photofile and compare with DATE, print photofile to stdout
# if dates match.
# Using find checks will not work, they only check if newer as a given date
# DOC when using find with both -exec (for copying) and -printf (for the filename), copying must happen first. Otherwise
# the name will already have been printed to stdout before the file was copied
find "$DCIM_DIR" -regextype posix-extended -type f -iregex $EXTENSIONS ${SELECTION_PATTERN+-iname "$SELECTION_PATTERN"} \
    -exec cp --preserve=timestamps {} "$TMP_DIR" \; -printf "$TMP_DIR"'/%f\n' | while read -r photofile; do

    datetimeoriginal=$(lookup_exif_datetimeorig_or_lastmod "$photofile")

    date_iso=${datetimeoriginal% *}
    target_dir="$TARGET_DIR/$(directories_create_photofile_path_from_isodate_album "$date_iso" "$ALBUM")"

    if [[ -v CAMERA ]]; then
        camera=$CAMERA
    else 
        camera=$(photoid_camera_from_exif "$(lookup_camera_from_exif "$photofile")")
    fi
    
    photonumber=$(create_photonumber "$photofile")
    photoid=$(photoid_create "$TITLE" "$datetimeoriginal" "$camera" "$photonumber")
    extension=${photofile##*.}
    target_filename="$target_dir/$photoid.$extension"

    if [[ -e $target_filename ]]; then
        echo "[WARN] $target_filename exists, skipping" >&2
        continue
    fi
    
    if [[ -z $(readlink -f "$target_filename") ]]; then
        mkdir --parents "$(dirname "$target_filename")"
    fi

    cp --preserve=timestamps "$photofile" "$target_filename"
    chmod -w "$target_filename"

    echo "$target_filename"
done