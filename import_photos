#! /usr/bin/env bash

set -eu


declare -r NO_DCIM_DIR_RC=101
declare -r NO_TARGET_DIR_RC=102
declare -r NO_ALBUM_RC=103


BASE_DIR=$(dirname "$(readlink -e "$0")")
source "$BASE_DIR/metadata/lib/exif.sh"
source "$BASE_DIR/lib/directories.sh"
source "$BASE_DIR/lib/photoid.sh"

declare -r TMP_DIR=$(mktemp -d)

cleanup() {
  test -e "$TMP_DIR" && rm -rf "$TMP_DIR"
}
trap cleanup EXIT

declare -r FILETYPES_RAW_ONLY="raw"
declare -r FILETYPES_JPG_ONLY="jpeg"
declare -r FILETYPES_RAW_AND_JPG="raw+jpeg"

while getopts "y:" opt; do
    case $opt in
        y ) declare -r FILETYPES=$OPTARG;;
	esac
done
if ! [[ -v FILETYPES ]]; then
    declare -r FILETYPES=$FILETYPES_RAW_AND_JPG
fi

shift $(expr $OPTIND - 1 )

if [[ $# != 4 ]]; then
    echo "[ERROR] Parameters missing: $@" >&2
    exit 1
fi 

album=$1
title=$2
source_dir=$(readlink -e "$3")
collection_rootdir=$(readlink -e "$4")

if [[ -z $source_dir ]]; then
    echo "[ERROR] Source directory $3 does not exist" >&2
    exit 1
fi

if [[ -z $collection_rootdir ]]; then
    echo "[ERROR] Target directory $4 does not exist" >&2
    exit 1
fi

if [[ -z $title ]]; then
    title=$album
fi

case $FILETYPES in 
    $FILETYPES_RAW_ONLY )
        declare -r EXTENSIONS=".+\.(ORF|CRW|CR2|RAW|ARW)";;
    $FILETYPES_JPG_ONLY )
        declare -r EXTENSIONS=".+\.(JPG)";;
    $FILETYPES_RAW_AND_JPG|* )
        declare -r EXTENSIONS=".+\.(ORF|CRW|CR2|RAW|JPG|ARW)";;
    * )
        echo "[ERROR] Invalid filetypes string $FILETYPES" >&2
        exit 1
esac

# TODO to use DATE_TAKEN, add another step to pipeline: get date from photofile and compare with DATE, print photofile to stdout
# if dates match.
# Using find checks will not work, they only check if newer as a given date
# DOC when using find with both -exec (for copying) and -printf (for the filename), copying must happen first. Otherwise
# the name will already have been printed to stdout before the file was copied
find "$source_dir" -regextype posix-extended -type f \
    -iregex $EXTENSIONS \
    ${SELECTION_PATTERN+-iname "$SELECTION_PATTERN"} \
    -exec cp --preserve=timestamps {} "$TMP_DIR" \; -printf "$TMP_DIR"'/%f\n' | while read -r photofile; do

    datetimeoriginal=$(lookup_exif_datetimeorig_or_lastmod "$photofile")

    date_iso=${datetimeoriginal% *}
    target_dir="$collection_rootdir/$(directories_create_photofile_path_from_isodate_album "$date_iso" "$album")"

    camera=$(photoid_camera_from_exif "$(lookup_camera_from_exif "$photofile")")
    photonumber=$(create_photonumber "$photofile")
    photoid=$(photoid_create "$title" "$datetimeoriginal" "$camera" "$photonumber")
    extension=${photofile##*.}
    target_filename="$target_dir/$photoid.$extension"

    if [[ -e $target_filename ]]; then
        echo "[WARN] $target_filename exists, skipping" >&2
        continue
    fi
    
    if [[ -z $(readlink -f "$target_filename") ]]; then
        mkdir --parents "$(dirname "$target_filename")"
    fi

    cp --preserve=timestamps "$photofile" "$target_filename"
    chmod -w "$target_filename"

    echo "$target_filename"
done