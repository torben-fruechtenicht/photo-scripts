#! /usr/bin/env bash

set -u

declare -r -x APP_TITLE="Edit photo metadata"

declare -r BASE_DIR="$(dirname "$(readlink -e "$0")")/.."

PATH="$BASE_DIR/metadata:$BASE_DIR:$BASE_DIR/lib:$BASE_DIR/apps:$PATH"

source "$BASE_DIR/lib/strings.sh"
source "$BASE_DIR/lib/photofiles.sh"
source "$BASE_DIR/apps/lib/yad.sh"
source "$BASE_DIR/apps/lib/yad_form_values.sh"
source "$BASE_DIR/apps/lib/notification.sh"

while getopts "c" opt; do
    case $opt in
        c ) 
            declare -r NOCASEMATCH=
        ;;
	esac
done
shift $(expr $OPTIND - 1 )

augment_user_keywords() {
    local keywords=$1

    if [[ -v ALBUM_AS_KEYWORD ]]; then
        keywords="${keywords:+$keywords;}$ALBUM"
    fi

    if [[ -v TITLE_AS_KEYWORD ]] && [[ $ALBUM != $TITLE ]]; then
        keywords="${keywords:+$keywords;}$TITLE"
    fi

    echo "$keywords"
}

if [[ $# > 0 ]]; then
    PHOTOS=$(tr " " "\n" <<<$*)
else
    declare -r PHOTOS=$(selector)
    selector_rc=$? 
    if [[ $selector_rc == 101 ]]; then
        exit
    elif [[ -z $PHOTOS ]]; then
        notify_warning "$APP_TITLE" "No matching photos found"
        exit 1
    fi
fi


dialog_text="Metadata (blank fields will not be changed):"
album_field_value=$(remember_list "album" "gb")
title_field_value=$(remember_list "title" "gb")
keywords_field_value=$(remember_list "keywords" "gb")

 
user_edit_params=$(
    run_yad_selector_result_action_dialog "$APP_TITLE" "$PHOTOS" "$dialog_text" \
        --form \
        --field="Album:CBE" "$album_field_value" \
        --field="Add album name as a keyword:CHK" "TRUE" \
        --field="Remove old album name keyword:CHK" "TRUE" \
        --field="Title:CBE" "$title_field_value" \
        --field="Add title as a keyword:CHK" "TRUE" \
        --field="Remove old title keyword:CHK" "TRUE" \
        --field="Keywords (separated by \";\"):CBE" "$keywords_field_value" \
        --field="Description:TXT"
)
yad_rc=$?
if [[ $yad_rc = 252 ]] || [[ $yad_rc = 1 ]]; then
    exit
fi

declare -r ALBUM=$(trim_whitespace "$(get_option_at_index "$user_edit_params" 1)")
if [[ -n $ALBUM ]]; then
    memorize_form_combobox_values "$MEMORIZED_FORM_VALUES_FILE" "album" "$ALBUM" 25
    is_option_selected "$user_edit_params" 2 && declare -r ALBUM_AS_KEYWORD=
    is_option_selected "$user_edit_params" 3 && declare -r REMOVE_OLD_ALBUM_KEYWORD=
fi

declare -r TITLE=$(trim_whitespace "$(get_option_at_index "$user_edit_params" 4)")
if [[ -n $TITLE ]]; then
    memorize_form_combobox_values "$MEMORIZED_FORM_VALUES_FILE" "title" "$TITLE" 25
    is_option_selected "$user_edit_params" 5 && declare -r TITLE_AS_KEYWORD=
    is_option_selected "$user_edit_params" 6 && declare -r REMOVE_OLD_TITLE_KEYWORD=
fi

declare -r USER_KEYWORDS=$(trim_whitespace "$(get_option_at_index "$user_edit_params" 7)")
if [[ -n $USER_KEYWORDS ]]; then
    memorize_form_combobox_values "$MEMORIZED_FORM_VALUES_FILE" "keywords" "$USER_KEYWORDS" 25
fi
declare -r KEYWORDS=$(augment_user_keywords "$USER_KEYWORDS")

declare -r DESCRIPTION=$(trim_whitespace "$(get_option_at_index "$user_edit_params" 8)")

files=$PHOTOS
declare -r PHOTOS_COUNT=$(wc -l <<<"$PHOTOS")

if [[ -v REMOVE_OLD_ALBUM_KEYWORD ]] || [[ -v REMOVE_OLD_TITLE_KEYWORD ]]; then
    for photo in $files; do

        old_album=$(albumname_from_file "$photo")
        old_title=$(cut -d'_' -f1 <<<"$(basename "$photo")")

        keywords_to_remove=""

        if [[ -v REMOVE_OLD_ALBUM_KEYWORD ]]; then
            # protect against removing the album keyword if it is the same as the title keyword:
            # only remove the "shared" keyword if we want to remove the title keyword anyway (i.e.
            # REMOVE_OLD_TITLE_KEYWORD is set)
            if [[ "$old_album" != "$old_title" ]] || [[ -v REMOVE_OLD_TITLE_KEYWORD ]]; then
                keywords_to_remove="$old_album"
            fi    
        fi

        if [[ -v REMOVE_OLD_TITLE_KEYWORD ]]; then
            # see above about the conditions
            if [[ "$old_album" != "$old_title" ]] || [[ -v REMOVE_OLD_ALBUM_KEYWORD ]]; then
                keywords_to_remove="${keywords_to_remove:+$keywords_to_remove;}$old_title"
            fi    
        fi

        if [[ -n "$keywords_to_remove" ]]; then
            change_keywords "-$keywords_to_remove" "$photo" > /dev/null # we're not interested in the printed files
        fi

    done
fi


if [[ -n $KEYWORDS ]]; then
    change_keywords "$KEYWORDS" "$files" > /dev/null # we're not interested in the printed files
    update_keywords_rc=$?
    if [[ $update_keywords_rc = 0 ]]; then
        notify_info "$APP_TITLE" "Added keywords \"$KEYWORDS\" to $PHOTOS_COUNT photo(s)"
    else
        notify_error "$APP_TITLE" \
            "Failed adding keywords \"$KEYWORDS\" to $PHOTOS_COUNT photo(s) with return code $update_keywords_rc"
        exit 1
    fi
fi

if [[ -n $TITLE ]]; then
    # save the printed list of files because for moving (next step) we of course need the filenames with
    # changed titles
    files=$(set_title ${NOCASEMATCH+-c} "$TITLE" "$files") 
    rename_rc=$?
    if [[ $rename_rc = 0 ]]; then
        notify_info "$APP_TITLE" "Changing title of $PHOTOS_COUNT photo(s) to \"$TITLE\" done"
    else
        notify_error "$APP_TITLE" \
            "Changing title of $PHOTOS_COUNT photo(s) to \"$TITLE\" failed with return code $rename_rc"
        exit 1
    fi
fi

if [[ -n $ALBUM ]]; then
    # if we changed photo titles, $files will now also contain all associated files. But we can safely pass
    # $files to change_album because it will just throw away all irrelevant files
    change_album ${NOCASEMATCH+-c} "$ALBUM" "$files"  > /dev/null 
    change_album_rc=$?
    if [[ $change_album_rc = 0 ]]; then
        notify_info "$APP_TITLE" "Moving $PHOTOS_COUNT photos to \"$ALBUM\" done"
    else
        notify_error -e "$APP_TITLE" \
            "Moving $PHOTOS_COUNT photos to \"$ALBUM\" failed with return code $change_album_rc"
        exit 1
    fi
fi

if [[ -n $DESCRIPTION ]]; then
    change_photo_description "$DESCRIPTION" "$files"
    set_description_rc=$?
    if [[ $set_description_rc = 0 ]]; then
        notify_info "$APP_TITLE" "Setting description of $PHOTOS_COUNT photos done"
    else
        notify_error -e "$APP_TITLE" \
            "Setting description of $PHOTOS_COUNT photos failed with return code $set_description_rc"
        exit 1
    fi
fi