#! /usr/bin/env bash

set -u

declare -r APP_TITLE="Archive processed photos"

declare -r BASE_DIR="$(dirname "$(readlink -e "$0")")/.."

declare -r POPUP_CMD="$BASE_DIR/utils/notification"
declare -r MOVE_PHOTOS_CMD="$BASE_DIR/lib/move_photos.sh"
source "$BASE_DIR/lib/metadata.sh"
source "$BASE_DIR/apps/lib/yad.sh"
source "$BASE_DIR/apps/lib/form_values.sh"
source "$BASE_DIR/apps/lib/find_globs_factory.sh"

declare -r SEARCH_DIR=$(readlink -e "${1+$1}")
if [[ -z $SEARCH_DIR ]]; then
    "$POPUP_CMD" -e "$APP_TITLE" "No search directory given or not-existent"
    exit 1
fi

declare -r ARCHIVE_DIR=$(readlink -e "${2+$2}")
if [[ -z $ARCHIVE_DIR ]]; then
    "$POPUP_CMD" -e "$APP_TITLE" "No archive directory given or not-existent"
    exit 1
fi


options_string=$(run_yad "$APP_TITLE" "Select which photos to archive:" \
    --form \
    --field="Album:CBE" "$(get_memorized_values_or_default "$MEMORIZED_FORM_VALUES_FILE" "album" "")" \
    --field="Year:CBE" "$(get_memorized_values_or_default "$MEMORIZED_FORM_VALUES_FILE" "year" "$(date +%Y)")" \
    --field="Month:CB" "$(get_memorized_value_preselected_in_all_values_list "$MEMORIZED_FORM_VALUES_FILE" "month" "!$MONTHS")" )
yad_rc=$?
if [[ $yad_rc = 252 ]] || [[ $yad_rc = 1 ]]; then
    exit
fi

declare -r ALBUM=$(echo "$options_string" | cut -d'|' -f 1 | tr ' ' '-')
declare -r YEAR=$(echo "$options_string" | cut -d'|' -f 2)
declare -r MONTH=$(echo "$options_string" | cut -d'|' -f 3)

memorize_form_combobox_values "$MEMORIZED_FORM_VALUES_FILE" "album" "$ALBUM" 5
memorize_form_combobox_values "$MEMORIZED_FORM_VALUES_FILE" "year" "$YEAR" 5
memorize_form_value "$MEMORIZED_FORM_VALUES_FILE" "month" "$MONTH"


converted_file_glob() {
    local -r title=""
    local -r photonumber_tail=""
    local -r dayofmonth=""
    local -r timeofday=""
    echo "converted/$(filename_glob "$title" "$YEAR" "$(month_value_from_name "$MONTH")" "$dayofmonth" "$timeofday" "$photonumber_tail").jpg"
}

collect_archivable_photos() {
    local -r dayofmonth=""
    local -r year_dir_glob=$(year_glob $YEAR)
    local -r album_dir_glob=$(album_glob "$ALBUM")
    local -r day_dir_glob=$(date_path_glob "$YEAR" "$(month_value_from_name "$MONTH")" "$dayofmonth")

    # search all output files, i.e. jpgs from the converted dirs
    find "$SEARCH_DIR" -type f -ipath "*/$year_dir_glob/$album_dir_glob/$day_dir_glob/$(converted_file_glob)" | \
    # get fullnames for all processed files (and make sure we have no duplicates after variants reduction)
    while read -r processed_file; do
        fullname_from_photofile "$processed_file" | sed -r 's/(.+_[0-9a-zA-Z]+)-[0-9]+$/\1/'
    done | sort -u | \
    # collect original files
    while read -r fullname; do
        find "$SEARCH_DIR" -regextype posix-extended -type f \
            -iregex ".+/$fullname\.(ORF|RAW|JPG|CRW|CR2)$" ! -path '*/converted/*'
    done
}

archivable_photos=$(collect_archivable_photos)

if [[ -z $archivable_photos ]]; then
    "$POPUP_CMD" -e "$APP_TITLE" "No archivable photos found that match the filer"
    exit 1
fi

move_to_album_params=$(run_yad_selector_result_action_dialog "$APP_TITLE" \
    "$archivable_photos" "$SEARCH_DIR" "Archive the selected photos?")
yad_rc=$?
if [[ $yad_rc = 252 ]] || [[ $yad_rc = 1 ]]; then
    exit
fi


set -o pipefail
"$MOVE_PHOTOS_CMD" -t "$ARCHIVE_DIR" "$archivable_photos" | xargs --no-run-if-empty chmod ugo-w
action_rc=$?
if [[ $action_rc = 0 ]]; then
    "$POPUP_CMD" -i "$APP_TITLE" "Archived $(echo "$archivable_photos" | wc -l) photo(s) to \"$ARCHIVE_DIR\""
else
    "$POPUP_CMD" -e "$APP_TITLE" \
        "Archiving $(echo "$archivable_photos" | wc -l) photo(s) to \"$ARCHIVE_DIR\" failed with return code $action_rc"
    exit 1
fi