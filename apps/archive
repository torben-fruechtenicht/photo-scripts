#! /usr/bin/env bash

set -u

declare -r APP_TITLE="Archive processed photos"

declare -r BASE_DIR="$(dirname "$(readlink -e "$0")")/.."

source "$BASE_DIR/apps/apps_utils.sh"
declare -r SELECTOR="$BASE_DIR/utils/selector"
declare -r ARCHIVE_CMD="$BASE_DIR/archive_processed.sh"
declare -r POPUP_CMD="$BASE_DIR/utils/notification"
declare -r YAD_CMD="$BASE_DIR/utils/yad"
declare -r MOVE_PHOTOS_CMD="$BASE_DIR/lib/move_photos.sh"
source "$BASE_DIR/utils/yad_old_values.sh"
source "$BASE_DIR/utils/selector_filters.sh"
source "$BASE_DIR/lib/metadata.sh"

declare -r OLD_VALUES_FILE="$(get_old_values_file "import")"

declare -r SEARCH_DIR=$(readlink -e "${1+$1}")
if [[ -z $SEARCH_DIR ]]; then
    "$POPUP_CMD" -e "$APP_TITLE" "No search directory given or not-existent"
    exit 1
fi

declare -r ARCHIVE_DIR=$(readlink -e "${2+$2}")
if [[ -z $ARCHIVE_DIR ]]; then
    "$POPUP_CMD" -e "$APP_TITLE" "No archive directory given or not-existent"
    exit 1
fi


options_string=$("$YAD_CMD" \
    --title="Select from where to archive:" \
    --form \
    --field="Album:CBE" "$(old_values_or_default "$OLD_VALUES_FILE" "album" "")" \
    --field="Year:CBE" "$(old_values_or_default "$OLD_VALUES_FILE" "year" "$(date +%Y)")" \
    --field="Month:CB" "$(old_value_preselected_in_list "$OLD_VALUES_FILE" "month" "$MONTHS_INCL_EMPTY_VALUE")" )
yad_rc=$?
if [[ $yad_rc = 252 ]] || [[ $yad_rc = 1 ]]; then
    exit
fi

declare -r ALBUM=$(echo "$options_string" | cut -d'|' -f 1 | tr ' ' '-')
declare -r YEAR=$(echo "$options_string" | cut -d'|' -f 2)
declare -r MONTH=$(echo "$options_string" | cut -d'|' -f 3)

if [[ -v OLD_VALUES_FILE ]]; then
    test -n "$ALBUM" && save_cb_value "$OLD_VALUES_FILE" "album" "$ALBUM" 5
    test -n "$YEAR" && save_cb_value "$OLD_VALUES_FILE" "year" "$YEAR" 5
    test -n "$MONTH" && save_single_value "$OLD_VALUES_FILE" "month" "$MONTH"
fi


converted_file_glob() {
    local -r title=""
    local -r photonumber_tail=""
    local -r dayofmonth=""
    local -r timeofday=""
    echo "converted/$(filename_glob "$title" "$YEAR" "$MONTH" "$dayofmonth" "$timeofday" "$photonumber_tail").jpg"
}

collect_archivable_photos() {
    local -r dayofmonth=""
    local -r year_dir_glob=$(year_glob $YEAR)
    local -r album_dir_glob=$(album_glob "$ALBUM")
    local -r day_dir_glob=$(date_path_glob "$YEAR" "$MONTH" "$dayofmonth")

    # search all output files, i.e. jpgs from the converted dirs
    find "$SEARCH_DIR" -type f -ipath "*/$year_dir_glob/$album_dir_glob/$day_dir_glob/$(converted_file_glob)" | \
    # get fullnames for all processed files (and make sure we have no duplicates after variants reduction)
    while read -r processed_file; do
        fullname_from_photofile "$processed_file" | sed -r 's/(.+_[0-9a-zA-Z]+)-[0-9]+$/\1/'
    done | sort -u | \
    # collect original files
    while read -r fullname; do
        find "$SEARCH_DIR" -regextype posix-extended -type f \
            -iregex ".+/$fullname\.(ORF|RAW|JPG|CRW|CR2)$" ! -path '*/converted/*'
    done
}

archivable_photos=$(collect_archivable_photos)

if [[ -z $archivable_photos ]]; then
    "$POPUP_CMD" -e "$APP_TITLE" "No archivable photos found that match the filer"
    exit 1
fi

dialog_text=$(echo -e "Archive processed photos from list:\n
$(remove_searchdir_from_photos_list "$archivable_photos" "$SEARCH_DIR")\nto $ARCHIVE_DIR\n")
"$YAD_CMD" --title="$APP_TITLE" --text="$dialog_text"
yad_rc=$?
if [[ $yad_rc = 252 ]] || [[ $yad_rc = 1 ]]; then
    exit
fi

# FIXME use "set -o pipefail" so that we fail already from the first part, hopefully?
"$MOVE_PHOTOS_CMD" -t "$ARCHIVE_DIR" "$archivable_photos" | xargs --no-run-if-empty chmod ugo-w