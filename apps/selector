#! /usr/bin/env bash

set -u

declare -r CANCELLED_RC=101

! test -v APP_TITLE && declare -r APP_TITLE="Photo selector"

declare -r BASE_DIR="$(dirname "$(readlink -e "$0")")/.."

source "$BASE_DIR/lib/strings.sh"
source "$BASE_DIR/apps/lib/yad.sh"
source "$BASE_DIR/apps/lib/yad_form_values.sh"
source "$BASE_DIR/apps/lib/find_globs_factory.sh"
source "$BASE_DIR/apps/lib/notification.sh"
source "$BASE_DIR/apps/lib/search_dirs.sh"


declare -r SEARCH_DIRECTORIES_FILE=$HOME/.local/share/photo-scripts/selector_directories
if ! [[ -e $SEARCH_DIRECTORIES_FILE ]]; then
    notify_error "$APP_TITLE" "Search directories file $SEARCH_DIRECTORIES_FILE does not exist"
    exit 1
fi

# TODO add option to pass the search directory from the command line
search_directories_value=$(get_search_directories_as_yad_option_keys "$SEARCH_DIRECTORIES_FILE")

album_form_value=$(remember_list "album" "bl")
title_form_value=$(remember_list "title" "bl")
year_form_value=$(remember_list "year" "bl")
if [[ -z $year_form_value ]]; then
    year_form_value=$(date +%Y)
fi
month_form_value=$(prepare_list "$MONTHS" "gb" "$(remember_value "month")")
dayofmonth_form_value=$(prepare_list "$DAYS_OF_MONTH" "gb" "$(remember_value "dayofmonth")")

# TODO time of day should allow ranges
# TODO if a search directory has been passed in, field type will be RO (read-only)
options_string=$(run_yad "$APP_TITLE" "Select photos matching" \
    --form \
    --field="search directory:CB" "$search_directories_value" \
    --field="album name:CBE" "$album_form_value" \
    --field="photo title:CBE" "$title_form_value" \
    --field="year (4 digits):CBE" "$year_form_value" \
    --field="month:CB" "$month_form_value" \
    --field="day of month:CB" "$dayofmonth_form_value" \
    --field="time of day:TEXT" "" \
    --field="photo number ends with or is in range:TEXT" "" 2> /dev/null)
yad_rc=$?
if [[ $yad_rc = 252 ]] || [[ $yad_rc = 1 ]]; then
    exit $CANCELLED_RC
fi

search_dir_key=$(get_option_at_index "$options_string" 1)
declare -r SEARCH_DIR=$(lookup_search_directory_from_option_key "$SEARCH_DIRECTORIES_FILE" "$search_dir_key")
if [[ -z $SEARCH_DIR ]]; then
    notify_error "$APP_TITLE" "Cannot run selector without a search directory"
    exit 1
fi

declare -r ALBUM=$(get_option_at_index "$options_string" 2)
declare -r TITLE=$(get_option_at_index "$options_string" 3)
if [[ -z $ALBUM ]] && [[ -z $TITLE ]]; then
    notify_warning "$APP_TITLE" "One of album or title must be defined"
    exit 1
fi

declare -r YEAR=$(get_option_at_index "$options_string" 4)
declare -r MONTH=$(get_option_at_index "$options_string" 5)
declare -r DAY_OF_MONTH=$(get_option_at_index "$options_string" 6)
declare -r TIME_OF_DAY=$(get_option_at_index "$options_string" 7)

unpad_number() {
    local -r number_optional_zeropadded=$1
    echo "$((10#$number_optional_zeropadded))"
}

# if number_tail looks like a range (e.g. "2-17"), use an empty NUMBER_TAIL for find and set 
# NUMBER_TAIL_MIN/MAX and NUMBER_TAIL_SIZE. otherwise NUMBER_TAIL is set to number_tail
number_tail=$(get_option_at_index "$options_string" 8)
if [[ $number_tail =~ [0-9]+-[0-9]+ ]]; then
    declare -r NUMBER_TAIL=""
    declare -r NUMBER_TAIL_MIN=$(unpad_number "$(echo "$number_tail" | cut -d'-' -f1)")
    declare -r NUMBER_TAIL_MAX=$(unpad_number "$(echo "$number_tail" | cut -d'-' -f2)")

    if (( $NUMBER_TAIL_MIN > "$NUMBER_TAIL_MAX" )); then
        notify_warning "$APP_TITLE" \
            "Lower bound $NUMBER_TAIL_MIN for number tail is larger than upper bound $NUMBER_TAIL_MAX"
        exit 1
    fi  

    # echo must not add a newline because that would count as an extra character
    # TBD using a here string would solve it, too, I guess
    declare -r NUMBER_TAIL_SIZE=$(echo -n "$NUMBER_TAIL_MAX" | wc -m)
else
    declare -r NUMBER_TAIL=$number_tail
fi


memorize_form_combobox_values "$MEMORIZED_FORM_VALUES_FILE" "album" "$ALBUM" 25
memorize_form_combobox_values "$MEMORIZED_FORM_VALUES_FILE" "title" "$TITLE" 25
# to prevent gigantic result lists by accident, never save the empty year value, that parameter 
# should only be left out if explicitely desired (i.e. user has to remove any year value from the field)
test -n "$YEAR" && memorize_form_combobox_values "$MEMORIZED_FORM_VALUES_FILE" "year" "$YEAR" 5
memorize_form_value "$MEMORIZED_FORM_VALUES_FILE" "month" "$MONTH"
memorize_form_value "$MEMORIZED_FORM_VALUES_FILE" "dayofmonth" "$DAY_OF_MONTH"


get_number_tail() {
    local -r photo_file=$1
    local -r tail_size=$2

    file_name=$(basename "$photo_file")
    file_name_no_ext=${file_name%.*}
    echo $(unpad_number "${file_name_no_ext: -$tail_size}")
}

year_dir_glob=$(year_glob $YEAR)
album_sanitized=$(tr ' ' '-' <<<"$ALBUM")
album_dir_glob=$(album_glob "$album_sanitized")
month_value=$(month_value_from_name "$MONTH")
day_dir_glob=$(date_path_glob "$YEAR" "$month_value" "$DAY_OF_MONTH")
title_sanitized=$(tr ' ' '-' <<<"$TITLE")
filename_glob=$(filename_glob "$title_sanitized" "$YEAR" "$month_value" "$DAY_OF_MONTH" "$TIME_OF_DAY" "$NUMBER_TAIL")

# "-H" added for cases whhere $SEARCH_DIR is a symlink (-H will follow symlinks on command line but in the actual search)
find -H "$SEARCH_DIR" -regextype posix-extended -type f \
        -ipath "*/$year_dir_glob/$album_dir_glob/$day_dir_glob/$filename_glob.???" \
        -iregex ".+\.(ORF|RAW|JPG|CRW|CR2)" ! -path "*/converted/*" | \
# run all found files through range checks but skip all checks if no ranges are in use
while read -r matched_file; do
    if [[ -v NUMBER_TAIL_MIN ]]; then 
        number_tail=$(get_number_tail "$matched_file" "$NUMBER_TAIL_SIZE")
        (( $NUMBER_TAIL_MIN <= $number_tail )) && (( $number_tail <= $NUMBER_TAIL_MAX )) && \
            echo "$matched_file"
    else 
        echo "$matched_file"
    fi
done | sort
