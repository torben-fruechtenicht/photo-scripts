#! /usr/bin/env bash

# DOC a script to create RawTherapee sidecar templates from a hierarchical structure of sidecar snippets (referred to as
# "baselines"). 
# This script expects baseline files in a directory structure as follows
# - on 1st level, baseline files define basic defaults. 
# - on 2nd level, baselines are in directories per camera. Directory names must match Exif camera names
# - on 3rd level, baselines are in directories per lens (as attached to the camera from the parent directory)
# The directory structure of template sidecar files is created in the same manner as the baseline directories.
# Later, when creating sidecars from templates, create_sidecar will look up the correct template based
# on camera and lens from Exif.

set -ue

declare -r SELF=$(readlink -e "$0")
declare -r MELD_BASELINE=$(dirname "$SELF")/meld_baseline.sh

declare -r ROOT_BASELINE_FILE="root_baseline.pp3"

while getopts "ov" opt; do
    case $opt in
        o ) 
            declare -r OVERWRITE=;;
        v ) 
            declare -r VERBOSE=;;
    esac
done
shift $(($OPTIND - 1))

# first branch is the initial invocation from executing shell: first parameter is not an input profile. second branch is
# the self-invocation case when descending to child baselines, previously created profile is passed as 1st parameter
if ! [[ -f $1 ]] && ! [[ $1 =~ ".+\.pp3" ]]; then
    declare -r TARGET_DIR=$(readlink -f "$1")
    declare -r BASELINES_DIR=$(readlink -e "$2")
    declare -r INPUT_PROFILE="$BASELINES_DIR/$ROOT_BASELINE_FILE"
    declare -r BASELINES=$(find "$BASELINES_DIR" -mindepth 1 -maxdepth 1 -type f -regex '.*baseline\(..*\)?.pp3' \
        -not -name "$ROOT_BASELINE_FILE")
else
    declare -r INPUT_PROFILE=$(readlink -e "$1")
    declare -r TARGET_DIR=$(readlink -f "$2")
    declare -r BASELINES=$(readlink -e "$3")
fi

if ! [[ -e "$INPUT_PROFILE" ]]; then
    echo "[ERROR] Input profile does not exist" >&2
    exit 1
fi
test -v VERBOSE && echo "[INPUT PROFILE] $INPUT_PROFILE" >&2

if ! [[ -e $TARGET_DIR ]]; then
    test -v VERBOSE && echo "[INFO] Creating missing target directory $2" >&2
    mkdir -p "$TARGET_DIR"
fi
test -v VERBOSE && echo "[TARGET DIRECTORY] $TARGET_DIR" >&2

echo "[BASELINES] $BASELINES" >&2

baseline_format() {
    local -r baseline=$1
    local -r format=$(echo "$baseline" | sed -rn 's/.+\.([a-z]{3}).pp3/\1/p')
    # DOC print nothing to say that the baseline is can be used for any format
    if ! [[ $format == "pp3" ]]; then 
        echo "$format"
    fi
}

format_sibling_exists() {
    local -r baseline=$1
    local -r format=$2
    # DOC this will only work with non-specific baselines!
    test -e ${baseline/\.pp3/.${format}.pp3}
}


for baseline in "$BASELINES"; do

    # DOC step 1: meld the current baseline with INPUT_PROFILE
    baseline_filename=$(basename "$baseline")
    test -v VERBOSE && echo "[BASELINE] $baseline" >&2
    # DOC we replace "baseline" with "template" because it makes handling the extension easy (nothing to be done here for them)
    target_profile=$TARGET_DIR/${baseline_filename/baseline/template}
    test -v VERBOSE && echo "[TARGET] $target_profile" >&2

    if [[ -v OVERWRITE ]] || ! [[ -e $target_profile ]]; then
        cp "$INPUT_PROFILE" "$target_profile"
        $MELD_BASELINE ${VERBOSE+-v} "$baseline" "$target_profile"
        test -v VERBOSE || echo $target_profile
    else 
        echo "[WARN] Target profile $target_profile exists" >&2
        # DOC don't exit here because we still want the script to descend to possible new child baselines
    fi

    # DOC step 2: find all childbase lines which are compatible with the current baseline. recurse to merge each with the
    #   profile we just created 

    # DOC a format is either a image format extension (e.g. "orf" or "jpg") or an empty string for baselines
    # which can be applied to any image format
    current_format=$(baseline_format "$baseline")
    find "$(dirname "$baseline")" -mindepth 2 -maxdepth 2 -type f -regex '.*baseline\(..*\)?.pp3' |\
        while read -r child_baseline; do
            child_format=$(baseline_format "$child_baseline")
            # DOC continue with the child baseline if
            # - both current and child are not format-specific
            # - current is independent but has no sibling of the format-specific child type. FIXME explain what this case covers!
            # - both are format-specific and it is the same format
            if ([[ -z $current_format ]] && [[ -z $child_format ]]) || \
                ([[ -z $current_format ]] && [[ -n $child_format ]] && ! format_sibling_exists "$baseline" "$child_format") || \
                ([[ -n $current_format ]] && [[ -n $child_format ]] && [[ $current_format == $child_format ]]); then
                next_working_dir=$(dirname "$child_baseline")
                next_target_directory="$TARGET_DIR/${next_working_dir##*/}"
                $SELF ${OVERWRITE+-o} ${VERBOSE+-v} "$target_profile" "$next_target_directory" "$child_baseline"
            fi
        done  
done
