#! /usr/bin/env bash

set -u

declare -r APP_DIR=$(readlink -m "$HOME/.local/share/photo-scripts/")
declare -r BASEDIR="$(dirname "$(readlink -e "$0")")/../../"

source "$BASEDIR/lib/photofiles.sh"
#source "$BASE_DIR/rawtherapee/lib/sidecar.sh"

export PATH="$BASEDIR/metadata:$BASEDIR/lib:$PATH"

declare -r LOCK_FILE="$APP_DIR/rawtherapee_output_watcher.lock"

# NOTE postsaveprocessor is started alongside rawtherapee and should exit if rawtherapee is closed. however, this
# does not always work 100%. therefore, use a lockfile to prevent more than one running instance (to prevent 
# confusion and also because inotifywait )
if [[ -f $LOCK_FILE ]]; then
    echo "[WARN] Old lock file $LOCK_FILE exists, will try to kill old instance" >&2
    other_instance=$(cat $LOCK_FILE)
    kill $other_instance
    # NOTE wait 2 secs so that we have a chance to write into our own LOCK_FILE and not have it deleted by the other
    # instance (when that one tries to remove it on exit)
    sleep 2
fi
echo "$$" > $LOCK_FILE

cleanup() {
    echo "[INFO] Stopped watching $WATCH_DIR for new files..." >&2
    # inotifywait with "-monitor" will not exit if this script is killed so it has to be killed separately
    pkill -f "inotifywait --monitor.*$WATCH_DIR.*"
    test -e "$LOCK_FILE" && rm $LOCK_FILE
}
trap cleanup EXIT

# TODO allow multiple watch dirs
declare -r WATCH_DIR="$(readlink -f $1)"
if [[ -z $WATCH_DIR ]]; then
	echo "[ERROR] Watched directory $WATCH_DIR does not exist" >&2
	exit 1
fi

echo "[INFO] Starting to watch $WATCH_DIR for new files..." >&2
inotifywait --monitor --recursive --quiet --event create --format %w%f $WATCH_DIR | while read new_file; do
    # echo "[INFO] Received 'create' event: $new_file" >&2
    
    if is_output_file "$new_file" && is_variant "$new_file"; then
        # wait a bit so that the file has been fully written
        sleep 5
        echo "[INFO] Setting title in IPTC: $new_file" >&2
        # FIXME can be simplied to not rely on the actual title: just get the 
        # caption and description and update the variant number directly there
        set_photoid "$new_file" $(photoid "$new_file")
    fi
done

