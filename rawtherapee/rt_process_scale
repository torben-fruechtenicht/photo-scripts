#! /usr/bin/env bash

set -eu

declare -r BASE_DIR="$(dirname "$(readlink -e "$0")")/.."

source "$BASE_DIR/lib/photofiles.sh"
source "$BASE_DIR/lib/exif.sh"

export PATH="$BASE_DIR/rawtherapee:$BASE_DIR/lib:$PATH"

# prepare the scaling profile holder
declare -r SCALING_PROFILE_FILE=$(mktemp)

function delete_tmpfiles() {
	test -e "$SCALING_PROFILE_FILE" && rm -f "$SCALING_PROFILE_FILE"
}
trap delete_tmpfiles EXIT


function compute_scale() {
    local -r photofile=$1
    local -r target_value=$2

    if [[ -v SCALE_BY_HEIGHT ]]; then
        local -r original_value=$(lookup_image_height_from_exif "$photofile")
    else
        local -r original_value=$(lookup_image_width_from_exif "$photofile")
    fi

    bc <<<"scale=4; $target_value/$original_value" | awk '{printf "%f", $0}'
}

function prepare_scaling_profile() {
    local -r scale=$1
    echo "[Resize]
        Enabled=true
        Method=Lanczos
        DataSpecified=0
        Scale=$scale

        [PostResizeSharpening]
        Enabled=true
        Contrast=15
        Method=rld
        Radius=0.5
        Amount=200
        Threshold=20;80;2000;1200;
        OnlyEdges=false
        EdgedetectionRadius=1.9
        EdgeTolerance=1800
        HalocontrolEnabled=false
        HalocontrolAmount=85
        DeconvRadius=0.45
        DeconvAmount=100
        DeconvDamping=0
        DeconvIterations=100"
}

# FIXME add OVERWRITE OPTION or allow pass-through params

while getopts "c:q:hp:" opt; do
    case $opt in
        c )
            # 1-100
            declare -r JPEG_COMPRESSION=$OPTARG;;
        q )
            # 1-3 (Best compression/Balanced/Best quality)
            declare -r JPEG_QUALITY=$OPTARG;;
        h ) 
            declare -r SCALE_BY_HEIGHT=;;
        p )
            declare -r PROFILE=$OPTARG;;
	esac
done
shift $(expr $OPTIND - 1 )

if (( $# < 3 )); then
    echo "[ERROR] Missing parameter, given parameters are: $@" >&2
    exit 1
fi

# FIXME check if valid number   
declare -r SCALE_TO=$1

original=$(readlink -e "$2")
if [[ -z $original ]]; then
    echo "[ERROR] original missing" >&2
    exit 1
fi

target=$3
if [[ -z $target ]]; then
    echo "[ERROR] Target missing" >&2
    exit 1
fi

scale=$(compute_scale "$original" "$SCALE_TO")
# echo "[INFO] Using scale of $scale for $photofile" >&2
prepare_scaling_profile "$scale" > "$SCALING_PROFILE_FILE"

# TODO check if target width or height are larger than actual height or width of the source. don't
# apply any scaling in that case, only copy the image file unchanged

rt_process ${PROFILE+-p "$PROFILE"} -p "$SCALING_PROFILE_FILE" \
    ${JPEG_COMPRESSION+-c $JPEG_COMPRESSION} ${JPEG_QUALITY+-q $JPEG_QUALITY} \
    "$original" "$target"