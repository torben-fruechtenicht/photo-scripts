#! /usr/bin/env bash

set -eu

declare -r APPDIR=$(readlink -m "$HOME/.local/share/photo-scripts/")
declare -r BASEDIR="$(dirname "$(readlink -e "$0")")/.."

# TODO TBD we are only adding APPDIR to PATH because we want to run rawtherapee via the symlink installed
# in APPDIR. 
# => actually, it should be the calling script (the root one) which manipulates the path for that purpose
export PATH="$BASEDIR/lib:$APPDIR:$PATH"

source "$BASEDIR/lib/photofiles.sh"

while getopts "p:c:q:s" opt; do
    case $opt in
        c )
            # 1-100
            declare -r JPEG_COMPRESSION=$OPTARG;;
        q )
            # 1-3
            declare -r JPEG_QUALITY=$OPTARG;;
        p ) 
            PROFILES="${PROFILES-}${PROFILES+ }-p $OPTARG";;
        s )
            SAVE_SIDECAR=;; 
        o ) 
            # TODO rename to OVERWRITE or FORCE
            OVERRIDE=;;
	esac
done
shift $(expr $OPTIND - 1 )

declare -r SOURCE=$(readlink -m "$1")
if ! [[ -e $SOURCE ]] && ! [[ -f $SOURCE ]]; then
    echo "[ERROR] Source file $SOURCE does not exist" >&2
    exit 1
fi

if [[ $# = 2 ]]; then
    declare -r TARGET=$(readlink -m "$2")
    if [[ -z $TARGET ]]; then
        echo "[ERROR] Given target does not exist" >&2
        exit 1
    fi
fi


function next_variant() {
    local -r source_photoid=$1
    local -r targetdir=$2

    local -r existing=$(find "$targetdir" -type f -name "$source_photoid*.jpg")

    if [[ -z $existing ]]; then
        # we need this branch, otherwise the next one would match, too (because there is always one line)
        echo
    elif [[ $(wc -l <<<"$existing") = 1 ]]; then
        if [[ $existing =~ .+-([0-9]+)\..+ ]]; then
            echo $((${BASH_REMATCH[1]} + 1))
        else 
            echo "1"
        fi
    else    
        # FIXME TBD why must grep have "-v"?!
        local -r highest_variant=$(grep -v "$source_photoid-*.jpg" <<<"$existing" | sort --version-sort | tail -n 1)   
        [[ $highest_variant =~ .+-([0-9]+)\..+ ]]
        echo $((${BASH_REMATCH[1]} + 1))
    fi
}

function compute_targetfile() {
    local -r source_filename=$(basename "$1")
    local -r targetdir=$2
    local -r photoid=${source_filename%%.*} 
    local -r next_variant=$(next_variant "$photoid" "$targetdir")
    # actually, we don't need to add the extension, Rawtherapee will select the correct one
    if [[ -n $next_variant ]]; then
        echo "$targetdir/$photoid-$next_variant.jpg"
    else 
        echo "$targetdir/$photoid.jpg"
    fi    
}

function target_is_directory() {
    local -r target=$1
    ! [[ $target =~ .+\..+ ]]
}

function targetfile_in_std_converted_dir() {
    local -r sourcefile=$1
    local -r sourcedir=$(dirname "$sourcefile")
    local -r targetdir="$sourcedir/converted"

    test -e "$targetdir" || mkdir "$targetdir"

    compute_targetfile "$sourcefile" "$targetdir"
}

function targetfile_in_dir_from_params() {
    local -r sourcefile=$1
    local -r targetdir=$2

    test -e "$targetdir" || mkdir "$targetdir"

    compute_targetfile "$sourcefile" "$targetdir"
}


if ! [[ -v TARGET ]]; then
    declare -r TARGETFILE=$(targetfile_in_std_converted_dir "$SOURCE")
elif target_is_directory "$TARGET"; then
    declare -r TARGETFILE=$(targetfile_in_dir_from_params "$SOURCE" "$TARGET")
else 
    # if TARGET is a file, we assume that either it does not exist or that OVERRIDE has been set.
    # if not, bad luck
    declare -r TARGETFILE="$TARGET"
fi

# "-Y" will make rawtherapee overwrite any existing files
# FIXME this will not work if TARGET is only a directory because compute_targetfile will already 
# decide that a variant will be created
# "-c" is not a real option but rather a marker, "only input files/dirs after this" - that's why all other options must go
# before that marker
rawtherapee --cli \
    ${JPEG_COMPRESSION+-j$JPEG_COMPRESSION} ${JPEG_QUALITY+-js$JPEG_QUALITY} \
    ${PROFILES--s} ${PROFILES+$PROFILES} \
    ${OVERRIDE+-Y} ${SAVE_SIDECAR+-O}${SAVE_SIDECAR--o} "$TARGETFILE" \
    -c "$SOURCE" &> /dev/null

# if the photo is a variant, set iptc properties for headline and caption to preserve correct name
if is_variant "$TARGETFILE"; then
    set_title_in_iptc "$TARGETFILE" "$(photoid "$TARGETFILE")"
fi
echo "$TARGETFILE"


